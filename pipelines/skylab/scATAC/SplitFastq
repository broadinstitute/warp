#!/bin/bash

## Set script params
set -o pipefail
## Note: not setting -e as error codes are explicitly handled in this script

## CLI parameters
## inputFastq='demo.R1.fastq'
## outputDir='output'
## nChunks=10
## outputFilename='chunk.'


## Process command line params
while getopts ":i:d:n:o:" opt; do
  case $opt in
    i)
	  inputFastq=$OPTARG ;;
    d)
          outputDir=$OPTARG ;;
    n)
          nChunks=$OPTARG ;;
    o)
          outputFilename=$OPTARG ;;
    *)
	  echo "Usage:"
          echo "     $0 -i inputFastq -d outputDirectory -n numberOfChunks -o outputFilename -p outputPrefix"
	  exit 1;
	  ;;
  esac
done
shift $((OPTIND -1))

## Check that all the parameters have been set
if [ -z ${inputFastq+x} ]; then
    echo "-i (input fastq file) needs to be specified"
    exit 1;
fi
if [ -z ${outputDir+x} ]; then
    echo "-d (output directory) needs to be specified"
    exit 1;
fi
if [ -z ${nChunks+x} ]; then
    echo "-n (number of chunks) needs to be specified"
    exit 1;
fi
if [ -z ${outputFilename+x} ]; then
    echo  "-o (output filename) needs to be specified"
    exit 1;
fi

## Check that the input fastq exists, the output directory does not
## and the chunks provided is a numberic value
if [ ! -s "$inputFastq" ]; then
    echo "Input fastq file $inputFastq: is empty or does not exist"
    exit 1;
fi
if [ -e $outputDir ]; then
    echo Output directory $outputDir exists
    exit 1;
fi
if [[ ! $nChunks =~ ^[0-9]+$ ]]; then
    echo "Number of chunks needs to be a positive integer"
    exit 1;
fi

## Computed parameters: input file name extension and filename
inputFastqBasename=$(basename -- "$inputFastq")
inputFastqExt="${inputFastqBasename##*.}"
filename="${inputFastqBasename%.*}"
outputPrefix=${outputDir}/${outputFilename}

## Check and create output directory
mkdir $outputDir
if [ $? -ne 0 ]; then
    echo An error occured while creating directory $outputDir
    exit 1 ;
fi

## Check if input fastq is compressed
if [ $inputFastqExt == "gz" ]
then
   ## TODO: Verify with magic number check
   ## readCommand="gzip -d -c -q "
   echo "Compressed input files are not currently supported." 
   exit 1;
else
   readCommand="cat "
fi

## Get the line count of the input file
lineCount=$($readCommand $inputFastq | wc -l)

# Check the line count is divisible by 4
if [ $(( $lineCount % 4 )) -ne 0 ]
then
	echo "Error: number of lines in input fastq is not a multiple of 4"
	exit 1;
fi

## Get the number of entries
recordCount=$(( $lineCount / 4))

## Effective number of chunks
if [ $(( $recordCount % nChunks == 0 )) ]
then
   	enChunks=$nChunks
else
	enChunks=$(( $nChunks - 1 ))
fi

## Calculate the number of lines per output file
linesPerOutputFile=$(( $recordCount / $enChunks * 4 ))

## Split the files
echo Splitting files...
$readCommand $inputFastq | split -l $linesPerOutputFile - $outputPrefix
if [ $? -ne 0 ]; then
    echo "An error occured while splitting the files"
    exit 1;
fi

## Rename the output files
outFileList=$( ls ${outputDir}/* | sort )
if [ $? -ne 0 ]; then
    echo "An error occured while listing output files."
    exit 1;
fi
fileIndex=1
for f in $outFileList
do
    mv $f ${outputDir}/${outputFilename}${fileIndex}.fastq
    if [ $? -ne 0 ]; then
	echo "An error occured while renaming file ${f}. Some files may have not been renamed."
	exit 1;
    fi
    fileIndex=$((fileIndex + 1))
done

