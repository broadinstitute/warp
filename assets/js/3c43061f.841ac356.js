"use strict";(self.webpackChunkwebsite_2=self.webpackChunkwebsite_2||[]).push([[2173],{5680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>h});var r=n(6540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=l(n),m=i,h=c["".concat(p,".").concat(m)]||c[m]||u[m]||a;return n?r.createElement(h,o(o({ref:t},d),{},{components:n})):r.createElement(h,o({ref:t},d))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:i,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8926:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(9668),i=(n(6540),n(5680));const a={sidebar_position:2},o="Optimus v7.8.1 Methods",s={unversionedId:"Pipelines/Optimus_Pipeline/optimus.methods",id:"Pipelines/Optimus_Pipeline/optimus.methods",title:"Optimus v7.8.1 Methods",description:"Below we provide an example methods section for a publication, separated into single-cell or single-nucleus use cases. For the complete pipeline documentation, see the Optimus Overview.",source:"@site/docs/Pipelines/Optimus_Pipeline/optimus.methods.md",sourceDirName:"Pipelines/Optimus_Pipeline",slug:"/Pipelines/Optimus_Pipeline/optimus.methods",permalink:"/warp/docs/Pipelines/Optimus_Pipeline/optimus.methods",draft:!1,editUrl:"https://github.com/broadinstitute/warp/edit/develop/website/docs/Pipelines/Optimus_Pipeline/optimus.methods.md",tags:[],version:"current",lastUpdatedBy:"Robert Sidney Cox",lastUpdatedAt:1733411364,formattedLastUpdatedAt:"Dec 5, 2024",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Optimus Overview",permalink:"/warp/docs/Pipelines/Optimus_Pipeline/README"},next:{title:"What tags are included in an Optimus BAM file?",permalink:"/warp/docs/Pipelines/Optimus_Pipeline/Bam_tags"}},p={},l=[{value:"Single-cell (sc_rna mode)",id:"single-cell-sc_rna-mode",level:2},{value:"Single-nucleus (sn_rna mode)",id:"single-nucleus-sn_rna-mode",level:2}],d={toc:l},c="wrapper";function u(e){let{components:t,...n}=e;return(0,i.yg)(c,(0,r.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"optimus-v781-methods"},"Optimus v7.8.1 Methods"),(0,i.yg)("p",null,"Below we provide an example methods section for a publication, separated into single-cell or single-nucleus use cases. For the complete pipeline documentation, see the ",(0,i.yg)("a",{parentName:"p",href:"/warp/docs/Pipelines/Optimus_Pipeline/README"},"Optimus Overview"),"."),(0,i.yg)("h1",{id:"methods"},"Methods"),(0,i.yg)("h2",{id:"single-cell-sc_rna-mode"},"Single-cell (sc_rna mode)"),(0,i.yg)("p",null,"Data preprocessing and count matrix construction were performed using the Optimus v7.8.1 pipeline (RRID:SCR_018908). Briefly, FASTQ files were partitioned by barcodes using fastqprocess. The files were then trimmed, aligned, UMI-corrected against the 10x Genomics barcodes whitelist, and converted to a raw count matrix using STARsolo v2.7.11a. CB correction was performed using the ",(0,i.yg)("inlineCode",{parentName:"p"},"--soloCBmatchWLtype 1MM_multi")," parameter."),(0,i.yg)("p",null,"Reads were trimmed using the solo parameter ",(0,i.yg)("inlineCode",{parentName:"p"},"--clipAdapterType CellRanger4")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"--outFilterScoreMin 30"),' which matches read trimming performed by CellRanger4. Reads were then aligned to GENCODE mouse (M32) or human (V43) references in stranded mode. Genes were annotated using the STARsolo "Gene" COUNTING_MODE and UMIs were corrected with the ',(0,i.yg)("inlineCode",{parentName:"p"},"--soloUMIdedup 1MM_CR")," parameter, which uses Cell Ranger's correction method. The resulting BAM was then used for cell and gene metric correction using the warp-tools TagSort tool. The STAR TSV outputs for gene counts, features, and barcodes were converted to numpy arrays for downstream empty droplet detection using DropletUtils v1.2.1 emptyDrops with the parameters ",(0,i.yg)("inlineCode",{parentName:"p"},"--fdr-cutoff 0.01 --emptydrops-niters 10000 --min-molecules 100 --emptydrops-lower 100.")),(0,i.yg)("p",null,"All cell and gene metrics (alignment, mitochondrial, and other QC metrics), count matrices, and emptyDrops results were aggregated into a final h5ad-formatted cell-by-gene matrix. The final outputs included the unfiltered h5ad and unfiltered (but tagged) BAM file."),(0,i.yg)("p",null,"An example of the pipeline and outputs is available on the ",(0,i.yg)("a",{parentName:"p",href:"https://app.terra.bio/#workspaces/featured-workspaces-hca/HCA_Optimus_Pipeline"},"Terra HCA Optimus Pipeline Featured Workspace"),", and an additional pipeline overview is available in ",(0,i.yg)("a",{parentName:"p",href:"https://broadinstitute.github.io/warp/docs/Pipelines/Optimus_Pipeline/README"},"WARP documentation.")," Examples of genomic references, whitelists, and other inputs are available in the WARP repository ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/broadinstitute/warp/tree/master/pipelines/skylab/optimus/example_inputs"},"(see the example inputs)."),"."),(0,i.yg)("h2",{id:"single-nucleus-sn_rna-mode"},"Single-nucleus (sn_rna mode)"),(0,i.yg)("p",null,"Data preprocessing and count matrix construction were performed using the Optimus v7.8.1 pipeline (RRID:SCR_018908). Briefly, FASTQ files were partitioned by barcodes using fastqprocess. The files were then trimmed, aligned, UMI-corrected against the 10x Genomics barcodes whitelist, and converted to a raw count matrix using STARsolo v2.7.11a. CB correction was performed using the ",(0,i.yg)("inlineCode",{parentName:"p"},"--soloCBmatchWLtype 1MM_multi")," parameter."),(0,i.yg)("p",null,"Reads were trimmed using the solo parameter ",(0,i.yg)("inlineCode",{parentName:"p"},"--clipAdapterType CellRanger4")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"--outFilterScoreMin 30"),' which matches read trimming performed by CellRanger4. Reads were then aligned to GENCODE mouse (M32) or human (V43) references in stranded mode. Genes were annotated using the STAR "GeneFull_Ex50pAS" COUNTING_MODE and UMIs were corrected with the ',(0,i.yg)("inlineCode",{parentName:"p"},"--soloUMIdedup 1MM_CR"),", which uses a Cell Ranger's correction method. The resulting BAM was then used for cell and gene metric correction using the warp-tools TagSort tool. The STAR TSV outputs for gene counts, features, and barcodes were converted to numpy arrays for downstream h5ad conversion. All cell and gene metrics (alignment, mitochondrial, and other QC metrics) and count matrices were aggregated into a final h5ad-formatted cell-by-gene matrix. The final outputs included the unfiltered h5ad and unfiltered (but tagged) BAM file."),(0,i.yg)("p",null,"An example of the pipeline and outputs is available on the ",(0,i.yg)("a",{parentName:"p",href:"https://app.terra.bio/#workspaces/featured-workspaces-hca/HCA_Optimus_Pipeline"},"Terra HCA Optimus Pipeline Featured Workspace"),", and an additional pipeline overview is available in ",(0,i.yg)("a",{parentName:"p",href:"https://broadinstitute.github.io/warp/docs/Pipelines/Optimus_Pipeline/README"},"WARP documentation"),". Examples of genomic references, whitelists, and other inputs are available in the WARP repository (see the ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/broadinstitute/warp/tree/master/pipelines/skylab/optimus/example_inputs"},"example inputs."),")."))}u.isMDXComponent=!0}}]);