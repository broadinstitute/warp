name: Test Illumina Genotyping Array

# Controls when the workflow will run
on:
  #run on push to feature branch "kp_GHA_Terra_auth_PD-2682" - REMOVE WHEN DONE TESTING
  # push:
  #   branches:
  #     - kp_GHA_Terra_auth_PD-2682
  pull_request:
    branches: [ "develop", "staging", "master" ]
    # Only run if files in these paths changed: pipelines/broad/genotyping/illumina, tasks, verification, .github/workflows/test_illumina_genotyping_array.yml
    ####################################
    # SET PIPELINE SPECIFIC PATHS HERE #
    ####################################
    paths:
      - 'pipelines/broad/genotyping/illumina/**'
      - 'tasks/**'
      - 'verification/**'
      - '.github/workflows/test_illumina_genotyping_array.yml'


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      useCallCache:
        description: 'Use call cache (default: true)'
        required: false
        default: "true"
      updateTruth:
        description: 'Update truth files (default: false)'
        required: false
        default: "false"
env:
  PROJECT_NAME: WARP
  # Github repo name
  REPOSITORY_NAME: ${{ github.event.repository.name }}

jobs:
  run_pipeline:
    runs-on: ubuntu-latest
    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      # actions/checkout MUST come before auth
      - uses: 'actions/checkout@v3'

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          token_format: 'access_token'
          # Centralized in dsp-tools-k8s; ask in #dsp-devops-champions for help troubleshooting
          # This is provided by the DevOps team - do not change!
          workload_identity_provider: 'projects/1038484894585/locations/global/workloadIdentityPools/github-wi-pool/providers/github-wi-provider'
          # This is our tester service account
          service_account: 'pdt-tester@warp-pipeline-dev.iam.gserviceaccount.com'
          access_token_lifetime: '3600' #seconds, default is 3600
          access_token_scopes: 'profile, email, openid'

    # ... further steps are automatically authenticated
      - name: Check working directory
        run: |
          echo "Current directory:"
          pwd
          ls -lht

      - name: Submit job, poll status, and get outputs
        id: pipeline_run
        run: |
          # Set common environment variables
          TOKEN="${{ steps.auth.outputs.access_token }}"
          NAMESPACE="warp-pipelines"
          WORKSPACE="WARP Tests"
          USE_CALL_CACHE="${{ github.event.inputs.useCallCache }}"
          UPDATE_TRUTH="${{ github.event.inputs.updateTruth }}"
          # TODO: Need to get the test type (Plumbing/ Scientific) from inputs or based on the target branch
          TEST_TYPE="Plumbing"  # Placeholder for now
          CURRENT_TIME=$(date +"%Y-%m-%d-%H-%M-%S")
          
          ########################################
          # SET PIPELINE SPECIFIC VARIABLES HERE #
          ########################################
          PIPELINE_NAME="IlluminaGenotypingArray"
          PIPELINE_DIR="pipelines/broad/genotyping/illumina"
          # TODO: Need to set the truth and result paths appropriately
          TRUTH_PATH="gs://broad-warp-test-storage/illumina_genotyping_array/truth"
          RESULTS_PATH="gs://broad-warp-test-storage/illumina_genotyping_array/results/$CURRENT_TIME"
        

          # Create JSON for submission data# Create the submission_data.json file which will be the same for all inputs
          SUBMISSION_DATA_FILE="submission_data.json"
          CALL_CACHE_VALUE="true"
          # Convert USE_CALL_CACHE to a boolean-friendly format ("true" -> true, "false" -> false)
          if [ "$USE_CALL_CACHE" = "true" ]; then
              USE_CALL_CACHE_BOOL=true
          else
              USE_CALL_CACHE_BOOL=false
          fi
          if [ "$UPDATE_TRUTH" = "true" ]; then
              UPDATE_TRUTH=true
          else
              UPDATE_TRUTH=false
          fi
          # Use a heredoc to generate the JSON file content dynamically
          cat <<EOF > "$SUBMISSION_DATA_FILE"
          {
            "methodConfigurationNamespace": "warp-pipelines",
            "methodConfigurationName": "$PIPELINE_NAME",
            "useCallCache": $CALL_CACHE_VALUE,
            "deleteIntermediateOutputFiles": false,
            "useReferenceDisks": true,
            "memoryRetryMultiplier": 1.2,
            "workflowFailureMode": "NoNewCalls",
            "userComment": "Automated submission",
            "ignoreEmptyOutputs": false
          }
          EOF
          echo "Created submission data file: $SUBMISSION_DATA_FILE"
          cat "$SUBMISSION_DATA_FILE"
        
        
          # Loop through each file in the appropriate test inputs directory
          INPUTS_DIR=$PIPELINE_DIR/test_inputs/$TEST_TYPE
          for input_file in $INPUTS_DIR/*; do
            # Update input_file as needed for test
          test_input_file=$(python3 scripts/firecloud_api/UpdateTestInputs.py \
              --truth_path $TRUTH_PATH \
              --results_path $RESULTS_PATH \
              --inputs_json $input_file \
              --update_truth $UPDATE_TRUTH)

            # Removed the following lines:
            # python3 scripts/firecloud_api/firecloud_api.py \
            #   --token "$TOKEN" \
            #   --namespace "$NAMESPACE" \
            #   --workspace "$WORKSPACE" \
            #   --action upload_file \
            #   --pipeline_name "$PIPELINE_NAME" \
            #   --test_input_file "$test_input_file"

            SUBMISSION_ID=$(python3 scripts/firecloud_api/firecloud_api.py \
              --token "$TOKEN" \
              --namespace "$NAMESPACE" \
              --workspace "$WORKSPACE" \
              --action submit \
              --submission_data_file "$SUBMISSION_DATA_FILE")

            if [ -z "$SUBMISSION_ID" ]; then
              echo "Submission failed for input: $input_file"
              continue
            fi

            echo "Submission ID for input $input_file: $SUBMISSION_ID"

            RESPONSE=$(python3 scripts/firecloud_api/firecloud_api.py \
              --token "$TOKEN" \
              --namespace "$NAMESPACE" \
              --workspace "$WORKSPACE" \
              --action poll_status \
              --submission_id "$SUBMISSION_ID")

            echo "Workflows for input $input_file and their statuses:"
            echo "$RESPONSE" | jq

            for WORKFLOW_ID in $(echo "$RESPONSE" | jq -r 'keys[]'); do
              OUTPUT=$(python3 scripts/firecloud_api/firecloud_api.py \
                --token "$TOKEN" \
                --namespace "$NAMESPACE" \
                --workspace "$WORKSPACE" \
                --action get_outputs \
                --submission_id "$SUBMISSION_ID" \
                --workflow_id "$WORKFLOW_ID" \
                --pipeline_name "$PIPELINE_NAME")
              echo "Output for workflow $WORKFLOW_ID: $OUTPUT"
            done
          done
      
