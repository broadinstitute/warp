name: Test Illumina Genotyping Array

# Controls when the workflow will run
on:
  #run on push to feature branch "kp_GHA_Terra_auth_PD-2682" - REMOVE WHEN DONE TESTING
  # push:
  #   branches:
  #     - kp_GHA_Terra_auth_PD-2682
  pull_request:
    branches: [ "develop", "staging", "master" ]
    # Only run if files in these paths changed: pipelines/broad/genotyping/illumina, tasks, verification, .github/workflows/test_illumina_genotyping_array.yml
    ####################################
    # SET PIPELINE SPECIFIC PATHS HERE #
    ####################################
    paths:
      - 'pipelines/broad/genotyping/illumina/**'
      - 'tasks/**'
      - 'verification/**'
      - '.github/workflows/test_illumina_genotyping_array.yml'


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      useCallCache:
        description: 'Use call cache (default: true)'
        required: false
        default: "true"
      updateTruth:
        description: 'Update truth files (default: false)'
        required: false
        default: "false"
      testType:
        description: 'Specify the type of test (Plumbing or Scientific)'
        required: true
      truthBranch:
        description: 'Specify the branch for truth files (default: master)'
        required: false
        default: "master"


env:
  PROJECT_NAME: WARP
  # Github repo name
  REPOSITORY_NAME: ${{ github.event.repository.name }}


jobs:
  run_pipeline:
    runs-on: ubuntu-latest
    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      # actions/checkout MUST come before auth
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          token_format: 'access_token'
          # Centralized in dsp-tools-k8s; ask in #dsp-devops-champions for help troubleshooting
          # This is provided by the DevOps team - do not change!
          workload_identity_provider: 'projects/1038484894585/locations/global/workloadIdentityPools/github-wi-pool/providers/github-wi-provider'
          # This is our tester service account
          service_account: 'pdt-tester@warp-pipeline-dev.iam.gserviceaccount.com'
          access_token_lifetime: '3600' # seconds, default is 3600
          access_token_scopes: 'profile, email, openid'

      # Set the branch name.
      # github.head_ref contains the name of the branch in the context of a pull request
      # if github.head_ref is empty, it implies the workflow was triggered manually
      # ${GITHUB_REF##*/} extracts the branch name from GITHUB_REF.
      # The ##*/ is a parameter expansion that removes the refs/heads/ prefix, leaving just the branch name.
      - name: Set Branch Name
        id: set_branch
        run: |
          if [ -z "${{ github.head_ref }}" ]; then
            echo "Branch name is missing, using ${GITHUB_REF##*/}"
            echo "branch_name=${GITHUB_REF##*/}" >> $GITHUB_ENV
          else
            echo "Branch name from PR: ${{ github.head_ref }}"
            echo "branch_name=${{ github.head_ref }}" >> $GITHUB_ENV
          fi

      - name: Set Test Type for PRs
        if: ${{ github.event_name == 'pull_request' }}
        id: set_test_type
        run: |
          # Default to "Scientific" if targeting master
          if [ "${{ github.base_ref }}" == "master" ]; then
            echo "testType=Scientific" >> $GITHUB_ENV
          else
            echo "testType=Plumbing" >> $GITHUB_ENV
          fi

      - name: Use Provided Test Type
        if: ${{ github.event_name == 'workflow_dispatch' }}
        id: use_provided_test_type
        run: |
          # Use the testType provided by the user
          echo "testType=${{ github.event.inputs.testType }}" >> $GITHUB_ENV

      - name: Create Submission Data File
        run: |
          # Creating the submission data file for job submission
          echo "Creating submission data file..."
          # All necessary data preparation steps here

      - name: Submit Job
        id: submit_job
        run: |
          echo "Submitting job..."
          # Submit the job here and store the submission ID
          
          # Function to call the Firecloud API using the firecloud_api.py script
          firecloud_action() {
            python3 scripts/firecloud_api/firecloud_api.py --token "$TOKEN" --namespace "$NAMESPACE" --workspace "$WORKSPACE" --action "$1" "${@:2}"
          }
          
          SUBMISSION_ID=$(firecloud_action submit --submission_data_file "$SUBMISSION_DATA_FILE")
          echo "Submission ID: $SUBMISSION_ID"
          echo "submission_id=$SUBMISSION_ID" >> $GITHUB_ENV

      - name: Poll Status
        id: poll_status
        run: |
          echo "Polling status for submission ID: ${{ env.submission_id }}"
          RESPONSE=$(python3 scripts/firecloud_api/firecloud_api.py --token "${{ steps.auth.outputs.access_token }}" --action poll_status --submission_id "${{ env.submission_id }}")

          # Check if polling returned any data or an error
          if [ -z "$RESPONSE" ]; then
            echo "Failed to retrieve Workflow IDs for submission: ${{ env.submission_id }}"
            exit 1
          fi

          # Store workflow statuses
          echo "$RESPONSE" > workflow_statuses.json

      - name: Get Outputs
        id: get_outputs
        run: |
          echo "Retrieving outputs for submission ID: ${{ env.submission_id }}"
          WORKFLOW_IDS=$(jq -r 'keys[]' workflow_statuses.json)

          for WORKFLOW_ID in $WORKFLOW_IDS; do
            OUTPUT=$(python3 scripts/firecloud_api/firecloud_api.py --token "${{ steps.auth.outputs.access_token }}" --action get_outputs --submission_id "${{ env.submission_id }}" --workflow_id "$WORKFLOW_ID")
            echo "Workflow Output for $WORKFLOW_ID: $OUTPUT"
            echo "$OUTPUT" >> final_outputs.json
          done

      - name: Summarize and Print Results
        id: summarize_results
        run: |
          echo "Summarizing the final results..."
          # Process and print the results (outputs, statuses, etc.)
          cat final_outputs.json
          echo "Pipeline run complete!"

      - name: Print Summary on Success
        if: success()
        run: |
          echo "# :white_check_mark: Pipeline Execution Summary :white_check_mark:" >> $GITHUB_STEP_SUMMARY

      - name: Print Summary on Failure
        if: failure()
        run: |
          echo "# :x: Pipeline Execution Summary (on Failure) :x: " >> $GITHUB_STEP_SUMMARY