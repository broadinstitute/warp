
# This action releases from develop for all changed pipelines
name: WARP Release from Develop

# Controls when the workflow will run
on:
  # push to develop branch and master branch
  push:
    branches:
      - develop
      - master

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PROJECT_NAME: WARP
  # Github repo name
  REPOSITORY_NAME: ${{ github.event.repository.name }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  release-dev:
    runs-on: ubuntu-latest
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Fetch all history for all tags and branches
    - name: Check working directory
      run: |
        echo "Current directory: "
        pwd
        ls -lht
    - name: Set up Git
      run: |
        git fetch --all
    - name: Release from develop
      id: release_dev_script
      run: |
        #!/bin/bash
        source scripts/common.sh
        set -e
        ENV=dev
        echo $ENV
        echo "Getting all changed pipelines since last commit before releasing from develop"
        previous_commit_hash=$(git rev-parse HEAD^1)
        changed_pipelines=$(get_modified_pipelines ${previous_commit_hash})
        echo branch: ${GIT_BRANCH} previous_commit_hash: ${previous_commit_hash} env: ${ENV}
        if [[ -n ${ENV} ]]; then
            if [[ -n ${changed_pipelines[@]} ]]; then
                for pipeline in ${changed_pipelines[@]}; do
                    scripts/release_pipeline_to_github.sh -p ${pipeline} -e ${ENV}
                done
            else
                echo "There are no changed pipelines to release." 
            fi
        else
            echo "Releases are only made on merge to develop and master" 
        fi

    - name: Post validation results as a comment
      if: always()  # This ensures it runs regardless of previous step success/failure
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            const output = "${{ steps.validate_script.outputs.result }}".replace(/\\n/g, '\n').replace(/\\r/g, '\r');
            const issue_number = context.payload.pull_request.number;
            const message = `### üîçVersion Validation Results:\n\`\`\`\n${output}\n\`\`\``;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: message
            });
          } catch (error) {
            console.error('Failed to post comment:', error);
          }
    - name: Fail if validation failed
      if: contains(steps.validate_script.outputs.result, 'validation_failed')
      run: exit 1
      
      
