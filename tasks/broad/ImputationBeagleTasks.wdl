version 1.0

task CountVariantsInChunks {
  input {
    File vcf
    File vcf_index
    File panel_bed_file

    String gatk_docker = "us.gcr.io/broad-gatk/gatk:4.5.0.0"
    Int cpu = 1
    Int memory_mb = 16000
    Int disk_size_gb = 2 * ceil(size([vcf, vcf_index, panel_bed_file], "GiB")) + 10
  }
  Int command_mem = memory_mb - 1500
  Int max_heap = memory_mb - 1000

  command <<<
    set -e -o pipefail

    ln -sf ~{vcf} input.vcf.gz
    ln -sf ~{vcf_index} input.vcf.gz.tbi

    gatk --java-options "-Xms~{command_mem}m -Xmx~{max_heap}m" CountVariants -V input.vcf.gz | tail -n 1 > var_in_original
    bedtools intersect -a ~{vcf} -b ~{panel_bed_file} | wc -l > var_also_in_reference
  >>>

  output {
    Int var_in_original = read_int("var_in_original")
    Int var_also_in_reference = read_int("var_also_in_reference")
  }
  runtime {
    docker: gatk_docker
    disks: "local-disk ${disk_size_gb} HDD"
    memory: "${memory_mb} MiB"
    cpu: cpu
    preemptible: 3
  }
}

task CheckChunks {
  input {
    Int var_in_original
    Int var_also_in_reference

    String bcftools_docker = "us.gcr.io/broad-gotc-prod/imputation-bcf-vcf:1.0.7-1.10.2-0.1.16-1669908889"
    Int cpu = 1
    Int memory_mb = 4000
  }
  command <<<
    set -e -o pipefail

    if [ $(( ~{var_also_in_reference} * 2 - ~{var_in_original})) -gt 0 ] && [ ~{var_also_in_reference} -gt 3 ]; then
      echo true > valid_file.txt
    else
      echo false > valid_file.txt
    fi
  >>>
  output {
    Boolean valid = read_boolean("valid_file.txt")
  }
  runtime {
    docker: bcftools_docker
    disks: "local-disk 10 HDD"
    memory: "${memory_mb} MiB"
    cpu: cpu
    preemptible: 3
  }
}

task Phase {
  input {
    File dataset_vcf
    File ref_panel_bref3
    File genetic_map_file
    String basename
    String chrom             # not needed if ref file has been chunked and you are using the entire chunk
    Int start                # not needed if ref file has been chunked and you are using the entire chunk
    Int end                  # not needed if ref file has been chunked and you are using the entire chunk

    String beagle_docker = "us.gcr.io/broad-gotc-prod/imputation-beagle:1.0.0-17Dec24.224-1740423035"
    Int cpu = 8                    # This parameter is used as the nthreads input to Beagle which is part of how we make it determinstic.  Changing this value may change the output generated by the tool
    Int memory_mb = 32000          # value depends on chunk size, the number of samples in ref and target panel, and whether imputation is performed
    Int xmx_mb = memory_mb - 5000             # I suggest setting this parameter to be 85-90% of the memory_mb parameter
    Int disk_size_gb = ceil(3 * size([dataset_vcf, ref_panel_bref3], "GiB")) + 10         # value may need to be adjusted
  }

  command <<<
    set -e -o pipefail

    java -ea -Xmx~{xmx_mb}m \
    -jar /usr/gitc/beagle.17Dec24.224.jar \
    gt=~{dataset_vcf} \
    ref=~{ref_panel_bref3} \
    map=~{genetic_map_file} \
    out=phased_~{basename} \
    chrom=~{chrom}:~{start}-~{end} \
    impute=false \
    nthreads=~{cpu} \
    seed=-99999

  >>>
  output {
    File vcf = "phased_~{basename}.vcf.gz"
    File log = "phased_~{basename}.log"
  }
  runtime {
    docker: beagle_docker
    disks: "local-disk ${disk_size_gb} HDD"
    memory: "${memory_mb} MiB"
    cpu: cpu
    preemptible: 3
  }
}

task Impute {
  input {
    File dataset_vcf
    File ref_panel_bref3
    File genetic_map_file
    String basename
    String chrom             # not needed if ref file has been chunked and you are using the entire chunk
    Int start                # not needed if ref file has been chunked and you are using the entire chunk
    Int end                  # not needed if ref file has been chunked and you are using the entire chunk

    String beagle_docker = "us.gcr.io/broad-gotc-prod/imputation-beagle:1.0.0-17Dec24.224-1740423035"
    Int cpu = 8                    # This parameter is used as the nthreads input to Beagle which is part of how we make it determinstic.  Changing this value may change the output generated by the tool
    Int memory_mb = 32000          # value depends on chunk size, the number of samples in ref and target panel, and whether imputation is performed
    Int xmx_mb = memory_mb - 5000             # I suggest setting this parameter to be 85-90% of the memory_mb parameter
    Int disk_size_gb = ceil(3 * size([dataset_vcf, ref_panel_bref3], "GiB")) + 10         # value may need to be adjusted
  }

  command <<<
    set -e -o pipefail

    java -ea -Xmx~{xmx_mb}m \
    -jar /usr/gitc/beagle.17Dec24.224.jar \
    gt=~{dataset_vcf} \
    ref=~{ref_panel_bref3} \
    map=~{genetic_map_file} \
    out=imputed_~{basename} \
    chrom=~{chrom}:~{start}-~{end} \
    impute=true \
    nthreads=~{cpu} \
    seed=-99999

  >>>
  output {
    File vcf = "imputed_~{basename}.vcf.gz"
    File log = "imputed_~{basename}.log"
  }
  runtime {
    docker: beagle_docker
    disks: "local-disk ${disk_size_gb} HDD"
    memory: "${memory_mb} MiB"
    cpu: cpu
    preemptible: 3
  }
}

task ErrorWithMessageIfErrorCountNotZero {
  input {
    Int errorCount
    String message
  }
  command <<<
    if [[ ~{errorCount} -gt 0 ]]; then
      >&2 echo "Error: ~{message}"
      exit 1
    else
      exit 0
    fi
  >>>

  runtime {
    docker: "ubuntu:20.04"
    preemptible: 3
  }
  output {
    Boolean done = true
  }
}

task CreateVcfIndex {
  input {
    File vcf_input

    Int disk_size_gb = ceil(1.2*size(vcf_input, "GiB")) + 10
    Int cpu = 1
    Int memory_mb = 6000
    String gatk_docker = "us.gcr.io/broad-gatk/gatk:4.5.0.0"
  }
  Int command_mem = memory_mb - 1500
  Int max_heap = memory_mb - 1000

  String vcf_basename = basename(vcf_input)

  command {
    set -e -o pipefail

    ln -sf ~{vcf_input} ~{vcf_basename}

    bcftools index -t ~{vcf_basename}
  }
  runtime {
    docker: gatk_docker
    disks: "local-disk ${disk_size_gb} HDD"
    memory: "${memory_mb} MiB"
    cpu: cpu
    preemptible: 3
  }
  output {
    File vcf = "~{vcf_basename}"
    File vcf_index = "~{vcf_basename}.tbi"
  }
}
